@model CDS.Models.ListLessonInfo
@{
    ViewBag.Title = "Home Page";
    Layout="~/Views/Shared/_CDSLayout.cshtml";
}

<link href="~/Content/morris.css" rel="stylesheet" />
@*<script src="~/Scripts/jquery.min.js"></script>*@
<script src="~/Scripts/jquery.knob.min.js"></script>
<script src="~/Scripts/raphael.min.js"></script>
<script src="~/Scripts/morris.min.js"></script>
@*<script src="~/Scripts/Chart.js"></script>*@
<style>
    .rating-stars ul {
        list-style-type: none;
        padding: 0;
        -moz-user-select: none;
        -webkit-user-select: none;
    }

        .rating-stars ul > li.star {
            display: inline-block;
        }

            /* Idle State of the stars */
            .rating-stars ul > li.star > i.fa {
                font-size: 2.5em; /* Change the size of the stars */
                color: #ccc; /* Color on idle state */
            }

            /* Hover state of the stars */
            .rating-stars ul > li.star.hover > i.fa {
                color: #FFCC36;
            }

            /* Selected state of the stars */
            .rating-stars ul > li.star.selected > i.fa {
                color: #FFCC36;
            }
</style>




<div class="container-fluid main-con">
    <div class="box-graph">
        <div class="col-lg-8 col-md-8 col-sm-8 col-xs-12">
            <!-- LINE CHART -->
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">Lesson Progress</h3>
                    <select class="form-control" id="LineChart">
                        <option value="1"> Daily</option>
                        <option value="2"> Monthly</option>
                    </select>
                </div>
                <div class="box-body chart-responsive">
                    <div class="chart" id="line-chart" style="height:282px;"></div>
                </div>
                <!-- /.box-body -->
            </div>

            <!-- BAR CHART -->
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">Bar Chart</h3>
                    <select class="form-control" id="BarChart">
                        <option value="1"> Daily</option>
                        <option value="2"> Monthly</option>
                    </select>

                </div>
                <div class="box-body chart-responsive">
                    <div class="chart" id="bar-chart" style="height:288px;"></div>
                </div>
                <!-- /.box-body -->
            </div>
            <!-- /.box -->
        </div>
        <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
            <div class="info-box bg-darkblue">
                <span class="info-box-icon" style="padding: 10px 0px 0px;"><i class="icon icon-book-1"></i></span>

                <div class="info-box-content">
                    <span class="info-box-text">In Process Lesson</span>
                    <span class="info-box-number">
                        <span id="Inprocess"></span>/<span id="iTotal"></span>
                    </span>
                    <div class="progress">
                        <div class="progress-bar" id="inprocessbar"></div>
                    </div>
                    <span class="progress-description text-center">
                        <span id="ibartitle"></span>% In Process
                    </span>
                </div>
                <!-- /.info-box-content -->
            </div>

            <div class="info-box bg-darkpink">
                <span class="info-box-icon"><i class="icon icon-book-2"></i></span>

                <div class="info-box-content">
                    <span class="info-box-text">Submitted Lessons</span>
                    <span class="info-box-number">
                        <span id="Completed"></span>/<span id="cTotal"></span>
                    </span>

                    <div class="progress">
                        <div class="progress-bar" id="completedbar"></div>
                    </div>
                    <span class="progress-description text-center">
                        <span id="cbartitle"></span>% Submitted
                    </span>
                </div>
                <!-- /.info-box-content -->
            </div>
            <!-- Info Boxes Style 2 -->
            <div class="info-box bg-parrot-green">
                <span class="info-box-icon"><i class="icon icon-document-text-1"></i></span>

                <div class="info-box-content">
                    <span class="info-box-text">Approved Lessons</span>
                    <span class="info-box-number">
                        <span id="Verified"></span>/<span id="vTotal"></span>
                    </span>
                    <div class="progress">
                        <div class="progress-bar" id="verifiedbar"></div>
                    </div>
                    <span class="progress-description text-center">
                        <span id="vbartitle"></span>% Approved
                    </span>
                </div>
                <!-- /.info-box-content -->
            </div>

            <!-- /.info-box -->
           
            <!-- /.info-box icon-android-stopwatch -->
           
            <!-- /.info-box -->
            <div class="box box-solid">
                <div class="box-header remove-padding">
                    <h3 class="box-title pie-graph">Script Statistics</h3>
                    <div class="box-body">
                        <div class="row">
                            <div class="graph-b">
                                <div class="small-graph">
                                    <input id="inprogressknob" type="text" class="knob" value="0"  data-thickness="0.2" data-width="100" data-height="100" data-fgColor="#4C76DF">
                                    <div class="knob-label">In Process</div>
                                </div>
                                <div class="small-graph">
                                    <input id="completedknob" type="text" class="knob" value="0"  data-thickness="0.2" data-width="100" data-height="100" data-fgColor="#CB3E7C">
                                    <div class="knob-label">Submitted</div>
                                </div>
                                <div class="small-graph tab-des">
                                    <input id="verfiedknob" type="text" class="knob" value="0" data-thickness="0.2" data-width="100" data-height="100" data-fgColor="#5BC510">
                                    <div class="knob-label">Approved</div>
                                </div>

                                <div class="f-link">
                                    <p>To view the detail, <a href="../Home/StaticDashboard">click here</a></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    @* Section recent *@
    <div class="wl-holder">
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6">
                <h2>Recently Worked Lessons</h2>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6">
                <span class="icon-view-box">
                    <a href="">
                        <i class="icon icon-grid-1 active"></i>
                     </a>
                    <a href="../LessonPlanEditor/LessonList">
                        <i class="icon icon-list-1"></i>
                    </a>
                </span>

            </div>
        </div>
        <div class="row">
            @if (Model.lstLessonInfo != null)
            {
                    for (int i = 0; i < Model.lstLessonInfo.Count(); i++)
                    {
                        <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
                            <div class="RecTab" id="Les_@Model.lstLessonInfo.ToList()[i].LessonID">
                               <div class="info-lsn">
                                   <label>Creation Date: </label> @Model.lstLessonInfo.ToList()[i].StartTime
                               </div>
                                <div class="info-lsn">
                                    <label>Time Spent: </label> @Model.lstLessonInfo.ToList()[i].TimeConsumed
                                </div>
                                @if (Model.lstLessonInfo.ToList()[i].LessonPlanStatus == 2)
                                {
                                <div class="info-lsn">
                                    <label>Submission Date: </label> @Model.lstLessonInfo.ToList()[i].CompleteDate
                                </div>
                                }
                                @if (Model.lstLessonInfo.ToList()[i].LessonPlanStatus == 3)
                                {
                                    <div class="info-lsn">
                                        <label>Approved Date: </label> @Model.lstLessonInfo.ToList()[i].VerificationDate
                                    </div>
                                    <div class="info-lsn">
                                        <label>Approved By: </label> @Model.lstLessonInfo.ToList()[i].VerifiedBy
                                    </div>
                                    <div class="info-lsn">
                                        <label>Rating: </label><div class='rating-stars' style="font-size:4px;width: 105px;float:left;">
                                            <ul id="rating_@Model.lstLessonInfo.ToList()[i].LessonPlanID" class='stars'>
                                                @for (int j = 0; j < Model.lstLessonInfo.ToList()[i].Rating; j++)
                                                {
                                                <li class='star'>
                                                    <i class='fa fa-star fa-fw'></i>
                                                </li>
                                                }
                                            </ul>
                                        </div>
                                        <script>
                                            $(function () {
                                                var onStar = @Model.lstLessonInfo.ToList()[i].Rating;
                                                var stars = $('#rating_@Model.lstLessonInfo.ToList()[i].LessonPlanID').children('li.star');

                                                for (k = 0; k < stars.length; k++) {
                                                    $(stars[k]).removeClass('selected');
                                                }

                                                for (m = 0; m < onStar; m++) {
                                                    $(stars[m]).addClass('selected');
                                                }
                                            });
                                        </script>
                                    </div>
                                }
                            </div>
                            <div class="rec-lesn">
                                <div class="lsn-box">
                                    <span class="icon-lsn">
                                        <img src="~/images/icon-lsn.png" />
                                    </span>
                                    <span class="icon-tit">
                                        <p>Lesson: @Model.lstLessonInfo.ToList()[i].ChapterNumber.@Model.lstLessonInfo.ToList()[i].LessonNumber</p>
                                    </span>
                                    <span id="btn_@Model.lstLessonInfo.ToList()[i].LessonID" class="icon-menu-btn" onclick="ShowDetail(@Model.lstLessonInfo.ToList()[i].LessonID)">
                                        <i class="icon icon-dot-3"></i>
                                    </span>
                                </div>
                                <div class="btn-lsn">
                                    @if (Model.lstLessonInfo.ToList()[i].LessonPlanStatus == 1)
                                    {
                                        <a href="../LessonPlanEditor/LessonPlan?LessonId=@Model.lstLessonInfo.ToList()[i].EncryptLessonID&&mode=Desktop" class="progress-btn">In Process</a>
                                    }
                                    else if (Model.lstLessonInfo.ToList()[i].LessonPlanStatus == 2)
                                    {

                                        <a href="../LessonPlanEditor/LessonPlan?LessonId=@Model.lstLessonInfo.ToList()[i].EncryptLessonID&&mode=Desktop" class="progress-btn">Submitted</a>

                                    }
                                    else
                                    {
                                        <a href="../LessonPlanEditor/LessonPlan?LessonId=@Model.lstLessonInfo.ToList()[i].EncryptLessonID&&mode=Desktop" class="progress-btn">Approved</a>
                                    }
                                    <h2>@Model.lstLessonInfo.ToList()[i].LessonTitle</h2>
                                    @*<ul>
                                        <li><a href="" title="user"> <i class="fa fa-user"></i></a></li>
                                        <li><a href="" title=""> <i class="fa fa-comment-o"></i></a></li>
                                        <li><a href="" title=""> <i class="fa fa-check-square-o"></i></a></li>
                                    </ul>*@
                                </div>
                            </div>
                            <div class="g-btn">
                                <span class="btn-grd" style="cursor:default">Grade:<span class="dark">@Model.lstLessonInfo.ToList()[i].ClassName</span></span>
                                <span class="btn-sub" style="cursor:default">Subject:<span class="dark">@Model.lstLessonInfo.ToList()[i].SubjectName</span></span>
                            </div>
                        </div>
                    }

            }
            @*<div class="col-lg-4">
                <div class="rec-lesn">
                    <div class="lsn-box">
                        <span class="icon-lsn">
                            <img src="~/images/icon-lsn.png" />
                        </span>
                        <span class="icon-tit">
                            <p>Lesson: 22</p>
                        </span>
                        <span class="icon-menu-btn">
                            <i class="icon icon-dot-3"></i>
                        </span>
                    </div>
                    <div class="btn-lsn">
                        <a href="" class="progress-btn">in progress</a>
                        <h2>Washing hands properly</h2>
                        <ul>
                            <li><a href=""> <i class="fa fa-user"></i></a></li>
                            <li><a href=""> <i class="fa fa-comment-o"></i></a></li>
                            <li><a href=""> <i class="fa fa-check-square-o"></i></a></li>
                        </ul>
                    </div>
                </div>
                <div class="g-btn">
                    <a href="" class="btn-grd active" style="margin-right:-4px;">Grade:<span class="dark">1</span></a>
                    <a href="" class="btn-sub">Subject:<span class="dark">Science</span></a>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="rec-lesn">
                    <div class="lsn-box">
                        <span class="icon-lsn">
                            <img src="~/images/icon-lsn.png" />
                        </span>
                        <span class="icon-tit">
                            <p>Lesson: 22</p>
                        </span>
                        <span class="icon-menu-btn">
                            <i class="icon icon-dot-3"></i>
                        </span>
                    </div>
                    <div class="btn-lsn">
                        <a href="" class="progress-btn">in progress</a>
                        <h2>Washing hands properly</h2>
                        <ul>
                            <li><a href=""> <i class="fa fa-user"></i></a></li>
                            <li><a href=""> <i class="fa fa-comment-o"></i></a></li>
                            <li><a href=""> <i class="fa fa-check-square-o"></i></a></li>
                        </ul>
                    </div>
                </div>
                <div class="g-btn">
                    <a href="" class="btn-grd" style="margin-right:-4px;">Grade:<span class="dark">1</span></a>
                    <a href="" class="btn-sub">Subject:<span class="dark">Science</span></a>
                </div>
            </div>*@
        </div>
    </div>
</div>



<script>
    $(function () {
    "use strict";



    // LINE CHART
    //var line = new Morris.Line({
    //    element: 'line-chart',
    //    resize: true,
    //    data: [
    //    {y: '2011 Q1', item1: 2666},
    //    {y: '2011 Q2', item1: 2778},
    //    {y: '2011 Q3', item1: 4912},
    //    {y: '2011 Q4', item1: 3767},
    //    {y: '2012 Q1', item1: 6810},
    //    {y: '2012 Q2', item1: 5670},
    //    {y: '2012 Q3', item1: 4820},
    //    {y: '2012 Q4', item1: 15073},
    //    {y: '2013 Q1', item1: 10687},
    //    {y: '2013 Q2', item1: 8432},
    //    {y: '2013 Q2', item1: 8432}

    //    ],
    //    xkey: 'y',
    //    ykeys: ['item1'],
    //    labels: ['Item 1'],
    //    lineColors: ['#3c8dbc'],
    //    hideHover: 'auto'
    //});


    //BAR CHART
    //var bar = new Morris.Bar({
    //    element: 'bar-chart',
    //    resize: true,
    //    data: [
    //    {y: 'january', a: 100, b: 90},
    //    {y: 'Feburary', a: 75, b: 65},
    //    {y: 'March', a: 50, b: 40},
    //    {y: 'April', a: 75, b: 65},
    //    {y: 'May', a: 50, b: 40},
    //    { y: 'June', a: 75, b: 65 },
    //    { y: 'July', a: 100, b: 90 }
    //    ],
    //    barColors: ['#dddddd', '#67BA14'],
    //    xkey: 'y',
    //    ykeys: ['a', 'b'],
    //    labels: ['CPU', 'DISK'],
    //    hideHover: 'auto'
    //});
    });
            </script>

<script>
                $(function () {
                    /* jQueryKnob */

                    $(".knob").knob({
                        "readOnly":true,
                        /*change : function (value) {
                         //console.log("change : " + value);
                         },
                         release : function (value) {
                         console.log("release : " + value);
                         },
                         cancel : function () {
                         console.log("cancel : " + this.value);
                         },*/
                        draw: function () {
                            $(this.i).val(this.cv + '%')
                            // "tron" case
                            if (this.$.data('skin') == 'tron') {

                                var a = this.angle(this.cv)  // Angle
                                    , sa = this.startAngle          // Previous start angle
                                    , sat = this.startAngle         // Start angle
                                    , ea                            // Previous end angle
                                    , eat = sat + a                 // End angle
                                    , r = true;

                                this.g.lineWidth = this.lineWidth;

                                this.o.cursor
                                && (sat = eat - 0.3)
                                && (eat = eat + 0.3);

                                if (this.o.displayPrevious) {
                                    ea = this.startAngle + this.angle(this.value);
                                    this.o.cursor
                                    && (sa = ea - 0.3)
                                    && (ea = ea + 0.3);
                                    this.g.beginPath();
                                    this.g.strokeStyle = this.previousColor;
                                    this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, sa, ea, false);
                                    this.g.stroke();
                                }

                                this.g.beginPath();
                                this.g.strokeStyle = r ? this.o.fgColor : this.fgColor;
                                this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, sat, eat, false);
                                this.g.stroke();

                                this.g.lineWidth = 2;
                                this.g.beginPath();
                                this.g.strokeStyle = this.o.fgColor;
                                this.g.arc(this.xy, this.xy, this.radius - this.lineWidth + 1 + this.lineWidth * 2 / 3, 0, 2 * Math.PI, false);
                                this.g.stroke();

                                return false;
                            }
                        }
                    });
                });
                /* END JQUERY KNOB */

            </script>
<section>
    <script>
       
        $(function () {
            LessonTabData();
            ScriptStatData();
            ChartData();

            $("#LineChart").change(function () {
                var TypeID;
                TypeID = $("#LineChart").val();
                $.ajax({
                    dataType: "JSON",
                    type: "GET",
                    url: "../Home/Charts",
                    data: { TypeID: TypeID },
                    success: function (dbdata) {
                        $("#line-chart").html('');
                        
                        Morris.Line({
                            element: 'line-chart',
                            xValueType: "dateTime",
                            resize: true,
                            data: dbdata,
                            parseTime: false,
                            xkey: 'Date',
                            ykeys: ['VerifyLesson', 'NewLesson', 'CompleteLesson'],
                            labels: ['Approved Lesson', 'In Process', 'Submitted Lesson'],
                            lineColors: ['#5BC510', '#3c8dbc', '#CB3E7C'],
                            hideHover: 'auto',
                            behaveLikeLine: true,
                            gridIntegers: true,
                            ymin: 0,
                        });
                    }, error: function () {
                    }
                });
            });

            $("#BarChart").change(function () {
                var TypeID;
                TypeID = $("#BarChart").val();
                $.ajax({
                    dataType: "JSON",
                    type: "GET",
                    url: "../Home/Charts",
                    data: { TypeID: TypeID },
                    success: function (dbdata) {
                        $("#bar-chart").html('');
                        
                        Morris.Bar({
                            element: 'bar-chart',
                            resize: true,
                            data: dbdata,
                            barGap: 0,
                            xLabelMargin: 5,
                           // barSizeRatio: 1.5,
                            barColors: ['#dddddd', '#67BA14'],
                            xkey: 'Date',
                            ykeys: ['VerifyLesson', 'NewLesson', 'CompleteLesson'],
                            labels: ['Approved Lesson', 'In Process', 'Submitted Lesson'],
                            barColors: ['#5BC510', '#3c8dbc', '#CB3E7C'],
                            hideHover: 'auto',
                            gridIntegers: true,
                        ymin: 0,
                        });
                    }, error: function () {
                    }
                });
            });

        });
        function LessonTabData() {
            var Progressper;
            var Verifiedper;
            var Completedper;
            $.ajax({
                dataType: "JSON",
                type: "GET",
                url: "../Home/LessonTabData",
                success: function (dbdata) {
                    debugger
                    $("#vTotal").html('');
                    $("#vbartitle").html('');
                    $("#Verified").html('');
                    $("#Verified").html(dbdata[0].VerifiedLesson);
                    $("#vTotal").html(dbdata[0].TotalLesson);
                    Verifiedper = Math.round((dbdata[0].VerifiedLesson / dbdata[0].TotalLesson) * 100);
                    $("#verifiedbar").css("width", Verifiedper + "%");
                    $("#vbartitle").html(Verifiedper);


                    $("#cTotal").html('');
                    $("#cbartitle").html('');
                    $("#Completed").html('');
                    $("#Completed").html(dbdata[0].CompletedLesson);
                    $("#cTotal").html(dbdata[0].TotalLesson);
                    Completedper = Math.round((dbdata[0].CompletedLesson / dbdata[0].TotalLesson) * 100);
                    $("#completedbar").css("width", Completedper + "%");
                    $("#cbartitle").html(Completedper);

                    $("#iTotal").html('');
                    $("#ibartitle").html('');
                    $("#Inprocess").html('');
                    $("#Inprocess").html(dbdata[0].InProgressLesson);
                    $("#iTotal").html(dbdata[0].TotalLesson);
                    Progressper = Math.round((dbdata[0].InProgressLesson / dbdata[0].TotalLesson) * 100);
                    $("#inprocessbar").css("width", Progressper + "%");
                    $("#ibartitle").html(Progressper);
                }
            });
        }
            function ScriptStatData() {
                var Progressper;
                var Verifiedper;
                var Completedper;
                $.ajax({
                    dataType: "JSON",
                    type: "GET",
                    url: "../Home/ScriptStatistics",
                    success: function (dbdata) {
                        debugger
                        Progressper = Math.round((dbdata[0].InProgressLesson / dbdata[0].TotalLesson) * 100);
                        Verifiedper = Math.round((dbdata[0].VerifiedLesson / dbdata[0].TotalLesson ) * 100);
                        Completedper = Math.round((dbdata[0].CompletedLesson / dbdata[0].TotalLesson) * 100);

                        $("#inprogressknob").val(Progressper).trigger('change');
                        $("#verfiedknob").val(Verifiedper).trigger('change');
                        $("#completedknob").val(Completedper).trigger('change');
                    }, error: function () {
                    }
                });
        
            }
            function ChartData() {
                var TypeID;
                TypeID = 1;
                $.ajax({
                    dataType: "JSON",
                    type: "GET",
                    url: "../Home/Charts",
                    data: {TypeID: TypeID},
                    success: function (dbdata) {
                        
                        Morris.Line({
                            element: 'line-chart',
                            xValueType: "dateTime",
                            resize: true,
                            data: dbdata,
                            parseTime: false,
                            xkey: 'Date',
                            ykeys: ['VerifyLesson', 'NewLesson', 'CompleteLesson'],
                            labels: ['Approved Lesson', 'In Process', 'Submitted Lesson'],
                            lineColors: ['#5BC510', '#3c8dbc', '#CB3E7C'],
                            hideHover: 'auto',
                            behaveLikeLine: true,
                            gridIntegers: true,
                            ymin: 0,
                        });

                        Morris.Bar({
                            element: 'bar-chart',
                            resize: true,
                            data: dbdata,
                            barGap: 0,
                           // xLabelAngle: 45,
                            xLabelMargin: 5,
                         //   barSizeRatio: 2.5,
                            barColors: ['#dddddd', '#67BA14'],
                            xkey: 'Date',
                            ykeys: ['VerifyLesson', 'NewLesson', 'CompleteLesson'],
                            labels: ['Approved Lesson', 'In Process', 'Submitted Lesson'],
                            barColors: ['#5BC510', '#3c8dbc', '#CB3E7C'],
                            hideHover: 'auto',
                            gridIntegers: true,
                            ymin: 0,
                        });
                    }, error: function () {
                    }
                });
            }
            function DateTime() {
                var date = new Date();
                var month = date.getMonth();
                var monthString = month > 9 ? month : '0' + month;
                var day = date.getDate();
                var dayString = day > 9 ? day : '0' + day;
                var year = date.getFullYear();
                var hours = date.getHours();
                var minutes = date.getMinutes();
                var ampm = hours >= 12 ? 'pm' : 'am';
                hours = hours % 12;
                hours = hours ? hours : 12; // the hour '0' should be '12'
                minutes = minutes < 10 ? '0' + minutes : minutes;
                var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                         "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
                ];
                var strTime = dayString + " " + monthNames[month] + " " + year + "  " + hours + ':' + minutes + ' ' + ampm;
                return strTime;
            }
            function ShowDetail(LessonID) {
                debugger
                ID = LessonID
                //$("#Les_"+LessonID).css("display","block");
                $("#Les_"+LessonID).toggle();
            }
            $('body').click(function () {
                $('#Les_'+ID).hide();
            });

            $('.icon-menu-btn').click(function (event) {
                if (PreviousID != ID) {
                    $('#Les_' + PreviousID).hide();
                }
                    event.stopPropagation();
                PreviousID = ID;
            });
            var ID;
            var PreviousID;
    </script>

</section>
<section id="morris_chart_scaling">
    <script>
        (function () {
            var $, MyMorris;

            MyMorris = window.MyMorris = {};
            $ = jQuery;

            MyMorris = Object.create(Morris);

            MyMorris.Grid.prototype.gridDefaults["gridIntegers"] = false;

            MyMorris.Grid.prototype.setData = function (data, redraw) {
                var e, idx, index, maxGoal, minGoal, ret, row, step, total, y, ykey, ymax, ymin, yval, _ref;
                if (redraw == null) {
                    redraw = true;
                }
                this.options.data = data;
                if ((data == null) || data.length === 0) {
                    this.data = [];
                    this.raphael.clear();
                    if (this.hover != null) {
                        this.hover.hide();
                    }
                    return;
                }
                ymax = this.cumulative ? 0 : null;
                ymin = this.cumulative ? 0 : null;
                if (this.options.goals.length > 0) {
                    minGoal = Math.min.apply(Math, this.options.goals);
                    maxGoal = Math.max.apply(Math, this.options.goals);
                    ymin = ymin != null ? Math.min(ymin, minGoal) : minGoal;
                    ymax = ymax != null ? Math.max(ymax, maxGoal) : maxGoal;
                }
                this.data = (function () {
                    var _i, _len, _results;
                    _results = [];
                    for (index = _i = 0, _len = data.length; _i < _len; index = ++_i) {
                        row = data[index];
                        ret = {
                            src: row
                        };
                        ret.label = row[this.options.xkey];
                        if (this.options.parseTime) {
                            ret.x = Morris.parseDate(ret.label);
                            if (this.options.dateFormat) {
                                ret.label = this.options.dateFormat(ret.x);
                            } else if (typeof ret.label === 'number') {
                                ret.label = new Date(ret.label).toString();
                            }
                        } else {
                            ret.x = index;
                            if (this.options.xLabelFormat) {
                                ret.label = this.options.xLabelFormat(ret);
                            }
                        }
                        total = 0;
                        ret.y = (function () {
                            var _j, _len1, _ref, _results1;
                            _ref = this.options.ykeys;
                            _results1 = [];
                            for (idx = _j = 0, _len1 = _ref.length; _j < _len1; idx = ++_j) {
                                ykey = _ref[idx];
                                yval = row[ykey];
                                if (typeof yval === 'string') {
                                    yval = parseFloat(yval);
                                }
                                if ((yval != null) && typeof yval !== 'number') {
                                    yval = null;
                                }
                                if (yval != null) {
                                    if (this.cumulative) {
                                        total += yval;
                                    } else {
                                        if (ymax != null) {
                                            ymax = Math.max(yval, ymax);
                                            ymin = Math.min(yval, ymin);
                                        } else {
                                            ymax = ymin = yval;
                                        }
                                    }
                                }
                                if (this.cumulative && (total != null)) {
                                    ymax = Math.max(total, ymax);
                                    ymin = Math.min(total, ymin);
                                }
                                _results1.push(yval);
                            }
                            return _results1;
                        }).call(this);
                        _results.push(ret);
                    }
                    return _results;
                }).call(this);
                if (this.options.parseTime) {
                    this.data = this.data.sort(function (a, b) {
                        return (a.x > b.x) - (b.x > a.x);
                    });
                }
                this.xmin = this.data[0].x;
                this.xmax = this.data[this.data.length - 1].x;
                this.events = [];
                if (this.options.events.length > 0) {
                    if (this.options.parseTime) {
                        this.events = (function () {
                            var _i, _len, _ref, _results;
                            _ref = this.options.events;
                            _results = [];
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                e = _ref[_i];
                                _results.push(Morris.parseDate(e));
                            }
                            return _results;
                        }).call(this);
                    } else {
                        this.events = this.options.events;
                    }
                    this.xmax = Math.max(this.xmax, Math.max.apply(Math, this.events));
                    this.xmin = Math.min(this.xmin, Math.min.apply(Math, this.events));
                }
                if (this.xmin === this.xmax) {
                    this.xmin -= 1;
                    this.xmax += 1;
                }
                this.ymin = this.yboundary('min', ymin);
                this.ymax = this.yboundary('max', ymax);
                if (this.ymin === this.ymax) {
                    if (ymin) {
                        this.ymin -= 1;
                    }
                    this.ymax += 1;
                }
                if (((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'y') || this.options.grid === true) {
                    if (this.options.ymax === this.gridDefaults.ymax && this.options.ymin === this.gridDefaults.ymin) {
                        this.grid = this.autoGridLines(this.ymin, this.ymax, this.options.numLines);
                        this.ymin = Math.min(this.ymin, this.grid[0]);
                        this.ymax = Math.max(this.ymax, this.grid[this.grid.length - 1]);
                    } else {
                        step = (this.ymax - this.ymin) / (this.options.numLines - 1);
                        if (this.options.gridIntegers) {
                            step = Math.max(1, Math.round(step));
                        }
                        this.grid = (function () {
                            var _i, _ref1, _ref2, _results;
                            _results = [];
                            for (y = _i = _ref1 = this.ymin, _ref2 = this.ymax; step > 0 ? _i <= _ref2 : _i >= _ref2; y = _i += step) {
                                _results.push(y);
                            }
                            return _results;
                        }).call(this);
                    }
                }
                this.dirty = true;
                if (redraw) {
                    return this.redraw();
                }
            };
        }).call(this);
    </script>
</section>
